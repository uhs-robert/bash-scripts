#!/bin/bash

# Source the utilities file
source "$(dirname "$0")/bash_utilities"

# Default values for options
AUTO_CONFIRM=true
SILENT_RUN=true
SKIP_SECURITY=false
SKIP_FLATPAK=false
SKIP_CLEAN_CACHE=false
NEEDS_REBOOT=false

# Clean Up
cleanup() {
  print_title "CLEANING UP"

  # Calculate total updates (using defaults for unset variables)
  TOTAL_UPDATES=$((${DNF_COUNT:-0} + ${FLATPAK_COUNT:-0}))

  if ((TOTAL_UPDATES <= 0)); then
    [ -n "$LOG_FILE" ] && rm -f "$LOG_FILE"
  else
    printf "${GREEN}$TOTAL_UPDATES packages were updated. Log file: file://$LOG_FILE${ENDL}\n"

    # Check if a reboot is required
    if [ "$NEEDS_REBOOT" = true ]; then
      printf "${ORANGE}Reboot required to apply updates.${ENDL}\n"
    fi
  fi
}

# Function to handle terminal actions
give_terminal_exit_choices() {
  printf "\nWhat would you like to do next?${ENDL}"
  if [ "$NEEDS_REBOOT" = true ]; then
    printf "${ORANGE}A system reboot is required to apply all updates.${ENDL}"
  fi
  printf "${BLUE}1. Reboot${ENDL}"
  printf "${BLUE}2. Power-off${ENDL}"
  printf "${YELLOW}3. Open Log directory${ENDL}"
  printf "${GREEN}4. (y/n) Exit${ENDL}"
  exec </dev/tty
  read -p "Enter your choice [1-4] (default is 4): " CHOICE
  CHOICE=${CHOICE:-4}
  case $CHOICE in
  1)
    printf "${GREEN}Rebooting system${ENDL}"
    sudo reboot
    ;;
  2)
    printf "${GREEN}Powering off system${ENDL}"
    sudo poweroff
    ;;
  3)
    exec xdg-open "$LOG_DIR"
    exit 0
    ;;
  4 | "y" | "yes" | "n" | "no")
    exit 0
    ;;

  *) printf "${RED}Invalid choice. Please choose a numbered option.${ENDL}" ;;
  esac
}

# Function to handle notification actions
give_notification_exit_choices() {
  # Check if reboot is required
  if [ "$NEEDS_REBOOT" = true ]; then
    ICON="system-reboot"
    REBOOT_MESSAGE="\nA system reboot is required to apply all updates."
  else
    ICON="mintupdate-up-to-date"
    REBOOT_MESSAGE=""
  fi

  # Show notification
  PROGRESS_ID=$(notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON \
    --action="log=ðŸ“‚ View Logs" \
    --action="reboot=ðŸ”„ Reboot" \
    --action="shutdown=ðŸ’¡ Power-off" \
    "Update Complete" "$RESULT$REBOOT_MESSAGE" | tail -n1)
  case "$PROGRESS_ID" in
  "log")
    exec xdg-open "$LOG_DIR"
    exit 0
    ;;
  "reboot")
    printf "${GREEN}Rebooting system...${ENDL}"
    sudo reboot
    ;;
  "shutdown")
    printf "${GREEN}Powering off system${ENDL}"
    sudo poweroff
    ;;
  *)
    exit 0
    ;;
  esac
}

# Function to display help information
show_help() {
  print_title "HELP INFORMATION"
  print_header "Usage: $(basename "$0") [OPTIONS]"
  printf "${GREEN}This script performs a comprehensive system update on Fedora, including DNF package updates, security updates, cleanup of old packages, updating Flatpak packages, and cleaning up cached package data.${ENDL}"

  print_header "Options:"
  printf "  ${BOLD}${BLUE}-n, --enable-notifications${NC}        Enables notifications.${ENDL}"
  printf "  ${BOLD}${BLUE}-s, --skip-security${NC}        Skip security updates.${ENDL}"
  printf "  ${BOLD}${BLUE}-f, --skip-flatpak${NC}         Skip Flatpak updates.${ENDL}"
  printf "  ${BOLD}${BLUE}-c, --skip-clean-cache${NC}     Skip cleaning the DNF cache.${ENDL}"
  printf "  ${BOLD}${BLUE}-m, --manual-confirmation${NC}           Run DNF commands without the '-y' flag to require user confirmation.${ENDL}"
  printf "  ${BOLD}${BLUE}-h, --help${NC}                 Display this help message.${ENDL}\n"

  print_header "Examples:"
  local cmd=$(basename "$0")
  printf "  ${BLUE}${cmd}${NC}                      Run the script to perform system updates with auto-confirmation.${ENDL}"
  printf "  ${BLUE}${cmd} -n${NC}                   Perform system updates with notifications.${ENDL}"
  printf "  ${BLUE}${cmd} -s${NC}                   Perform system updates without checking for security updates.${ENDL}"
  printf "  ${BLUE}${cmd} -f${NC}                   Perform system updates without updating Flatpak packages.${ENDL}"
  printf "  ${BLUE}${cmd} -c${NC}                   Perform system updates without cleaning the DNF cache.${ENDL}"
  printf "  ${BLUE}${cmd} -m${NC}                   Perform system updates with user confirmation for each DNF operation.${ENDL}"
  printf "  ${BLUE}${cmd} -s -f -c${NC}             Combine multiple options to skip security updates, Flatpak updates, and DNF cache cleaning.${ENDL}"

  exit 0
}

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
  -n | --enable-notifications) SILENT_RUN=false ;;
  -s | --skip-security) SKIP_SECURITY=true ;;
  -f | --skip-flatpak) SKIP_FLATPAK=true ;;
  -c | --skip-clean-cache) SKIP_CLEAN_CACHE=true ;;
  -m | --manual-confirmation) AUTO_CONFIRM=false ;;
  -h | --help) show_help ;;
  *)
    printf "${RED}Unknown option: $1${ENDL}"
    show_help
    ;;
  esac
  shift
done

# Set DNF flags
DNF_FLAGS=""
[[ "$AUTO_CONFIRM" == true ]] && DNF_FLAGS="-y"

# Handle exit signals
trap 'printf "${RED}Update interrupted! Cleaning up...${ENDL}"; cleanup; exit 1' SIGINT SIGTERM
trap 'printf "${GREEN}Exiting script.${ENDL}"; cleanup; exit 0' EXIT

# Check for and install necessary dependencies
MISSING_PACKAGES=()
for pkg in rpmconf flatpak remove-retired-packages; do
  if ! command -v "$pkg" &>/dev/null; then
    MISSING_PACKAGES+=("$pkg")
  fi
done
if [ ${#MISSING_PACKAGES[@]} -gt 0 ]; then
  echo "Installing missing dependencies: ${MISSING_PACKAGES[*]}"
  sudo dnf install $DNF_FLAGS "${MISSING_PACKAGES[@]}"
fi

# Start system updates
print_title "STARTING SYSTEM UPDATES"
{
  ICON="mintupdate-checking"
  PROGRESS_ID=$(notify-send -a "System Update" -p -t 0 "System Update" "Running system update...")

  # Begin logging
  LOG_DIR="$HOME/.log"
  mkdir -p "$LOG_DIR"
  LOG_FILE="$LOG_DIR/system_update_$(date +%F_%H-%M-%S).log"
  exec > >(tee -a "$LOG_FILE") 2>&1

  # Refresh DNF cache
  if [ "$SKIP_CLEAN_CACHE" = false ]; then
    print_header "Refreshing DNF Cache"
    [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Refreshing DNF cache..."
    sudo dnf makecache --refresh $DNF_FLAGS
  fi
}

# Handle DNF Updates
print_header "Checking DNF Pending Updates"
{
  [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Checking for DNF updates..."
  DNF_OUTPUT=$(dnf check-update)
  DNF_COUNT=$(echo "$DNF_OUTPUT" | grep -Ec ' updates$')
  NVIDIA_UPDATES=$(echo "$DNF_OUTPUT" | grep -i "nvidia" | wc -l)
  KERNEL_UPDATES=$(echo "$DNF_OUTPUT" | grep -i "kernel" | wc -l)
  FONT_UPDATES=$(echo "$DNF_OUTPUT" | grep -i "font" | wc -l)
  ICON="mintupdate-installing"
  if ((DNF_COUNT > 0)); then
    print_header "Updating DNF Packages"
    [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "DNF updating $DNF_COUNT packages..."
    sudo dnf update $DNF_FLAGS
    [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "DNF update completed. Updated $DNF_COUNT packages."
  else
    [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "No DNF updates found."
    echo "Nothing to do."
  fi
}

# Handle leftover RPM configuration files
print_header "Handling Leftover RPM Configuration Files"
{
  [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Handling RPM configuration files..."
  RPM_FILES=$(sudo rpmconf -a | tee /dev/tty)
  if [ -n "$RPM_FILES" ]; then
    echo "$RPM_FILES"
  else
    echo "Nothing to do."
  fi
}

# Check and install security updates
if [ "$SKIP_SECURITY" = false ]; then
  print_header "Security Updates"
  [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Checking for security updates..."
  SECURITY_UPDATES=$(sudo dnf check-update --security)
  if echo "$SECURITY_UPDATES" | grep -q "Security"; then
    sudo dnf update --security $DNF_FLAGS
    printf "${GREEN}Installed security updates.${ENDL}"
  else
    echo "Nothing to do."
  fi
fi

# Clean up old packages
print_header "Cleaning Up Old Packages"
{
  [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Cleaning up old packages..."
  AUTO_REMOVE=$(sudo dnf autoremove $DNF_FLAGS)
  if ! echo "$AUTO_REMOVE" | grep -q "Nothing to do"; then
    printf "${YELLOW}%s${ENDL}" "$AUTO_REMOVE"
  else
    echo "$AUTO_REMOVE"
  fi
}

# Handle Flatpak updates
if [ "$SKIP_FLATPAK" = false ]; then
  print_header "Checking Flatpak Updates"
  FLATPAK_PENDING=$(flatpak remote-ls --updates | wc -l)
  if [ "$FLATPAK_PENDING" -gt 0 ]; then
    print_header "Updating Flatpak Packages"
    [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Updating $FLATPAK_PENDING Flatpak packages..."
    FLATPAK_OUTPUT=$(flatpak update -y --noninteractive $DNF_FLAGS)
    FLATPAK_COUNT=$(echo "$FLATPAK_OUTPUT" | grep -c "Updated:")
    printf "${GREEN}Flatpak update completed. Updated packages: %s${ENDL}" "$FLATPAK_COUNT"
  else
    echo "Nothing to do."
    FLATPAK_COUNT=0
  fi
  print_header "Removing Unused Flatpak Packages"
  [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Removing unused Flatpak packages..."
  flatpak uninstall --unused -y $DNF_FLAGS
fi

# Handle driver or kernel updates
if ((DNF_COUNT > 0)); then
  print_header "Checking Font Updates"
  [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i $ICON "System Update" "Checking for font updates..."
  if [ "$FONT_UPDATES" -gt 0 ]; then
    printf "${YELLOW}Font packages were updated. Rebuilding font cache...${ENDL}"
    fc-cache -fv
  else
    echo "Nothing to do."
  fi

  # Check for driver or kernel updates
  # DELETE THIS BLOCK IF NOT NEEDED AFTER KERNEL UPDATE
  print_header "Checking for driver or kernel updates"
  [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i "$ICON" "System Update" "Checking for driver or kernel updates..."

  if [ "$NVIDIA_UPDATES" -gt 0 ] || [ "$KERNEL_UPDATES" -gt 0 ]; then
    [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i "$ICON" "System Update" "Driver and/or kernel update detected. Performing maintenance..."

    # Get the latest installed kernel version
    NEW_KERNEL="$(rpm -q --qf '%{VERSION}-%{RELEASE}.%{ARCH}\n' kernel-core | sort -V | tail -1)"

    if [ "$NVIDIA_UPDATES" -gt 0 ]; then
      printf "${YELLOW}NVIDIA package updates detected.${ENDL}"
      printf "${YELLOW}Refreshing akmods for kernel: %s${ENDL}" "$NEW_KERNEL"
      sudo akmods --force --kernel "$NEW_KERNEL"
    fi

    printf "${YELLOW}Running dracut for kernel: %s${ENDL}" "$NEW_KERNEL"
    sudo dracut --force "/boot/initramfs-${NEW_KERNEL}.img" "$NEW_KERNEL"

    printf "${GREEN}Completed dracut!${ENDL}"
    [ "${SILENT_RUN,,}" = "false" ] && notify-send -a "System Update" -r "$PROGRESS_ID" -t 0 -i "$ICON" "System Update" "Completed maintenance."
    NEEDS_REBOOT=true
  else
    echo "Nothing to do."
  fi
fi

# Handle finished updates
echo
print_title "SYSTEM UPDATES COMPLETED"
{
  TOTAL_UPDATES=$((${DNF_COUNT:-0} + ${FLATPAK_COUNT:-0}))
  if ((TOTAL_UPDATES <= 0)); then
    RESULT="No updates found."
    rm "$LOG_FILE"
  else
    RESULT="$TOTAL_UPDATES packages were updated successfully!"
    # Show log file
    print_header "Log File Saved"
    {
      printf "${YELLOW}Open Log directory: file://%s${ENDL}" "$LOG_DIR"
      printf "${YELLOW}View Log file: file://%s${ENDL}" "$LOG_FILE"
      printf "${ENDL}"
    }
  fi

  # Start listening to user input
  give_notification_exit_choices &
  give_terminal_exit_choices &
  wait -n
}
